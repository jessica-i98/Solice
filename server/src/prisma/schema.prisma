generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                     @id @default(auto()) @map("_id") @db.ObjectId
    mobile        String                     @unique
    username      String?                    @unique
    password      String?                    
    name          String?
    email         String?                    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    conversations ConversationParticipants[]
    messages      Message[]
}

model Conversation {
    id              String                     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt       DateTime                   @default(now())
    updatedAt       DateTime                   @updatedAt
    participants    ConversationParticipants[]
    messages        Message[]
    latestMessageId String?                    @unique @db.ObjectId
    latestMessage   Message?                   @relation(fields: [latestMessageId], references: [id], name: "latestMessage", onDelete: NoAction, onUpdate: NoAction)
}

model ConversationParticipants {
    id                 String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @updatedAt
    conversationId     String       @db.ObjectId
    conversation       Conversation @relation(fields: [conversationId], references: [id])
    userId             String       @db.ObjectId
    user               User         @relation(fields: [userId], references: [id])
    hasSeenLastMessage Boolean
}

model Message {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    conversationId String        @db.ObjectId
    conversation   Conversation  @relation(fields: [conversationId], references: [id])
    senderId       String        @db.ObjectId
    body           String
    sender         User          @relation(fields: [senderId], references: [id])
    latestIn       Conversation? @relation(name: "latestMessage")
}
